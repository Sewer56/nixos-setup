This is a tool for making multiple edits in one operation. These edits can be on a single file or across multiple files.
Prefer this tool over the Edit tool when multiple changes need to be made at once.

Supported use cases:
- Multiple edits to a single file
- Single edit to multiple files
- Multiple edits to multiple files

Quick decision guide:
- Many files or many edits? Use this tool.
- Only one file with a single change? Use the Edit tool.

Before using this tool:

1. Use the Read tool to understand the file contents and context
2. Verify the directory paths are correct

To make multiple file edits, provide the following:
1. files: An array of file operations, where each file operation contains:
   - filePath: The absolute path to the file to modify (must be absolute, not relative)
   - edits: An array of edit operations to perform on this file, where each edit contains:
     - oldString: The text to replace (must match the file contents exactly, including all whitespace and indentation)
     - newString: The edited text to replace the oldString
     - replaceAll: Replace all occurrences of oldString. This parameter is optional and defaults to false.

IMPORTANT:
- All edits are applied in sequence, in the order they are provided
- Each edit within a file operates on the result of the previous edit
- All edits across all files must be valid for the operation to succeed - if any edit fails, none will be applied
- This tool is ideal when you need to make coordinated changes across multiple files (e.g., refactoring function names, updating imports)

CRITICAL REQUIREMENTS:
1. All edits follow the same requirements as the single Edit tool
2. Plan your edits carefully to avoid conflicts between sequential operations

WARNING:
- The tool will fail if edits.oldString doesn't match the file contents exactly (including whitespace)
- The tool will fail if edits.oldString and edits.newString are the same
- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find
- This tool cannot create new files. An existing file must be present.

When making edits:
- Ensure all edits result in idiomatic, correct code
- Do not leave the code in a broken state
- Always use absolute file paths
- Use replaceAll for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.